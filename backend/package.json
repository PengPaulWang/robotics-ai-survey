// Create a new file: backend/package.json (add to scripts section)
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "build": "echo 'No build step needed'"
  }
}

// Update your server.js for production
const express = require('express');
const cors = require('cors');
const { MongoClient, ObjectId } = require('mongodb');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');

// Load environment variables
require('dotenv').config();

const app = express();
const port = process.env.PORT || 5001;

// Production environment detection
const isProduction = process.env.NODE_ENV === 'production';

// Debug environment variables (only in development)
if (!isProduction) {
  console.log('=== ENVIRONMENT DEBUG ===');
  console.log('PORT:', port);
  console.log('NODE_ENV:', process.env.NODE_ENV);
  console.log('MONGODB_URI:', process.env.MONGODB_URI ? 'Set' : 'Not set');
  console.log('FRONTEND_URL:', process.env.FRONTEND_URL);
  console.log('========================');
}

// Production CORS configuration
const allowedOrigins = process.env.FRONTEND_URL 
  ? process.env.FRONTEND_URL.split(',').map(url => url.trim())
  : [
      'http://localhost:3000',
      'http://127.0.0.1:3000',
      'https://your-survey-domain.vercel.app', // Update this with your actual domain
      'https://your-custom-domain.com' // Update this with your custom domain
    ];

app.use(cors({
    origin: allowedOrigins,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json({ limit: '10mb' }));

// Security headers for production
if (isProduction) {
  app.use((req, res, next) => {
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
    next();
  });
}

// Request logging middleware (only in development)
if (!isProduction) {
  app.use((req, res, next) => {
    console.log(`📝 ${new Date().toISOString()} - ${req.method} ${req.path}`);
    if (req.method !== 'GET') {
      console.log('📄 Request body:', req.body);
    }
    next();
  });
}

// Enhanced rate limiting for production
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: isProduction ? 50 : 100, // Stricter in production
  message: { error: 'Too many requests, please try again later.' },
  standardHeaders: true,
  legacyHeaders: false,
});
app.use(limiter);

// Specific rate limiting for auth endpoints
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit auth attempts
  message: { error: 'Too many authentication attempts, please try again later.' }
});

// MongoDB connection with better error handling
const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const dbName = process.env.DB_NAME || 'cardRatingsDB';
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this';

if (!process.env.MONGODB_URI && isProduction) {
  console.error('❌ MONGODB_URI is required in production');
  process.exit(1);
}

if (JWT_SECRET === 'your-secret-key-change-this' && isProduction) {
  console.error('❌ JWT_SECRET must be set in production');
  process.exit(1);
}

let db, usersCollection, ratingsCollection;

MongoClient.connect(uri, { 
  useUnifiedTopology: true,
  maxPoolSize: 10,
  serverSelectionTimeoutMS: 5000,
})
  .then(client => {
    console.log(`✅ Connected to MongoDB at ${dbName}`);
    db = client.db(dbName);
    usersCollection = db.collection('users');
    ratingsCollection = db.collection('ratings');
    
    // Create indexes
    usersCollection.createIndex({ email: 1 }, { unique: true });
    ratingsCollection.createIndex({ userId: 1, cardName: 1, ratingType: 1 }, { unique: true });
    
    if (!isProduction) {
      console.log('📊 Database collections initialized');
    }
  })
  .catch(err => {
    console.error('❌ MongoDB connection error:', err);
    process.exit(1);
  });

// Enhanced authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!isProduction) {
    console.log('🔐 Auth check - Token present:', !!token);
  }

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      if (!isProduction) {
        console.log('❌ Token verification failed:', err.message);
      }
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    
    if (!isProduction) {
      console.log('✅ Token verified for user:', user.email);
    }
    req.user = user;
    next();
  });
};

// Apply auth rate limiting to login/register
app.use('/auth/login', authLimiter);
app.use('/auth/register', authLimiter);

// Root endpoint for health check
app.get('/', (req, res) => {
  res.json({ 
    status: 'Survey API is running', 
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Database status endpoint
app.get('/status', async (req, res) => {
  try {
    const userCount = await usersCollection.countDocuments();
    const ratingCount = await ratingsCollection.countDocuments();
    
    res.json({
      status: 'OK',
      database: 'Connected',
      collections: {
        users: userCount,
        ratings: ratingCount
      },
      timestamp: new Date()
    });
  } catch (error) {
    res.status(500).json({
      status: 'Error',
      database: 'Disconnected',
      error: error.message
    });
  }
});

// [Include all your existing routes here - register, login, feedback, etc.]
// ... (all your existing auth and feedback routes) ...

// Global error handler
app.use((err, req, res, next) => {
  console.error('Global error:', err);
  
  if (isProduction) {
    res.status(500).json({ error: 'Internal server error' });
  } else {
    res.status(500).json({ error: err.message, stack: err.stack });
  }
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

app.listen(port, () => {
  console.log(`🚀 Server running on port ${port}`);
  if (!isProduction) {
    console.log(`🌐 CORS origins: ${allowedOrigins.join(', ')}`);
  }
  console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
});

module.exports = app;